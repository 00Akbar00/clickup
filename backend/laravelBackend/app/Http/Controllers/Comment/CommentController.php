<?php

namespace App\Http\Controllers\Comment;

use App\Events\CommentCreated;
use App\Http\Controllers\Controller;
use App\Services\CommentService\CommentFileService;
use App\Services\CommentService\CommentService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Event;
use Illuminate\Validation\Rule;
use Illuminate\Validation\ValidationException;


class CommentController extends Controller
{
    protected $commentService;
    protected $fileService;

    public function __construct(CommentService $commentService, CommentFileService $fileService)
    {
        $this->commentService = $commentService;
        $this->fileService = $fileService;
    }

    public function createComment(Request $request, $taskId)
    {
        // 1. Authentication Check
        if (!Auth::check()) {
            return response()->json([
                'message' => 'Unauthorized: Authentication is required to perform this action.',
                'errors' => [
                    'auth' => ['You must be logged in to create a comment.']
                ]
            ], 401);
        }

        // 2. Task ID Validation
        // if (!is_numeric($taskId) || (int)$taskId <= 0) {
        //     return response()->json([
        //         'message' => 'Invalid Task ID: The provided task ID is not valid.',
        //         'errors' => [
        //             'task_id' => ['Task ID must be a positive integer.']
        //         ]
        //     ], 400);
        // }
        // $taskId = (int)$taskId;

        try {
            // 3. Input Data Validation
            $validatedData = $request->validate([
                'comment' => [
                    'nullable',
                    'string',
                    'max:5000',
                    Rule::requiredIf(function () use ($request) {
                        return !$request->hasFile('files') || empty($request->file('files'));
                    }),
                    // CUSTOM VALIDATION: Disallow mix of alphanumeric and special characters
                    function ($attribute, $value, $fail) {
                        if (is_null($value) || $value === '') { // If nullable and not present, skip this check
                            return;
                        }
                        // Check for presence of alphanumeric characters (letters or numbers)
                        $hasAlphaNum = preg_match('/[a-zA-Z0-9]/', $value);
                        // Check for presence of special characters (anything not a letter, number, or whitespace)
                        // You can customize the definition of "special characters" by adjusting the regex.
                        // This example considers anything not alphanumeric and not whitespace as special.
                        $hasSpecial  = preg_match('/[^a-zA-Z0-9\s]/', $value);

                        if ($hasAlphaNum && $hasSpecial) {
                            $fail('The ' . $attribute . ' field cannot contain both alphanumeric characters and special characters at the same time. Please use either alphanumeric characters (and spaces) or special characters, but not a mix of both types.');
                        }
                    },
                ],
                'files' => [
                    'nullable',
                    'array',
                    'max:5', // Max 5 files
                ],
                'files.*' => [
                    'required',
                    'file',
                    'mimes:jpg,jpeg,png,pdf,doc,docx,txt,xls,xlsx,mp4,mov,avi,mkv,webm,mp3,wav,aac,ogg',
                    'max:10240', // Max 10MB per file
                ],
            ], [
                // Custom messages for standard validation rules
                'comment.required_if' => 'A comment is required when no files are uploaded.',
                'comment.max' => 'The comment may not be greater than 5000 characters.',
                'files.max' => 'You can upload a maximum of 5 files.',
                'files.*.required' => 'A file is required for each entry in the files list.',
                'files.*.mimes' => 'Invalid file type. Allowed types are: jpg,jpeg,png,pdf,doc,docx,txt,xls,xlsx,mp4,mov,avi,mkv,webm,mp3,wav,aac,ogg.',
                'files.*.max' => 'Each file may not be greater than 10MB.',
                // Custom message for the custom rule will be generated by the $fail callback
            ]);

            $filesInfo = [];
            if ($request->hasFile('files') && !empty($validatedData['files'])) {
                $filesInfo = $this->fileService->uploadFiles($validatedData['files']);
            }

            if (empty($validatedData['comment']) && empty($filesInfo)) {
                return response()->json([
                    'message' => 'Validation Failed: A comment or at least one file is required.',
                    'errors' => [
                        'general' => ['You must provide either a comment text or upload at least one file.']
                    ]
                ], 422);
            }

            $user = Auth::user();
            if (!$user || !isset($user->full_name)) {
                return response()->json([
                    'message' => 'User data incomplete: Unable to retrieve user\'s full name.',
                    'error' => 'User full name not found.'
                ], 500);
            }

            $commentData = [
                'task_id'   => $taskId,
                'sender_id' =>auth()->id(),
                'comment'   => $validatedData['comment'] ?? null,
                'files'     => $filesInfo,
                'timestamp' => now()->toISOString(),
                'name'      => $user->full_name,
            ];

            Event::dispatch(new CommentCreated($commentData));

            return response()->json([
                'message' => 'Comment created successfully and event dispatched.',
                'data'    => $commentData
            ], 201);

        } catch (ValidationException $e) {
            return response()->json([
                'message' => 'Validation Failed: Please check your input.',
                'errors'  => $e->errors()
            ], 422);
        } catch (\Throwable $e) {
            // Log::error('Failed to process comment: ' . $e->getMessage(), ['exception' => $e]);
            return response()->json([
                'message' => 'Failed to process comment: An unexpected error occurred.',
                'error'   => $e->getMessage()
            ], 500);
        }
    }

    public function getComments($taskId)
    {
        return $this->commentService->getCommentsFromNodeServer($taskId);
    }

}
