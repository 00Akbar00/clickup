image: docker:24.0.7

services:
  - docker:24.0.7-dind

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  POSTGRES_DB: laravel
  POSTGRES_USER: laravel_user
  POSTGRES_PASSWORD: secret

stages:
  - prepare
  - backend
  - node
  - docker
  - deploy


.docker_before_script: &docker_before_script
  before_script:
    - apk add --no-cache curl git bash
    - docker info
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"

# Laravel backend dependencies
laravel_prepare:
  stage: prepare
  image: composer:2
  before_script:
    - cd laravel-app
    - ls -la
  script:
    - composer install --prefer-dist --no-interaction
    - cp .env.example .env || true
    - php artisan key:generate || true
  artifacts:
    paths:
      - vendor
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

# Laravel tests
laravel_tests:
  stage: backend
  image: php:8.2
  services:
    - mysql:5.7
  before_script:
    - cd laravel-app
    - apt-get update && apt-get install -y apt-utils unzip git zip curl libzip-dev libpng-dev
    - docker-php-ext-install pdo_mysql zip gd
    - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
    - composer --version
  script:
    - composer install
    - php artisan migrate --force

# Node.js project setup
nodejs_setup:
  stage: node
  image: node:18
  script:
    - cd node-chat-server
    - npm install
    - echo "No tests defined"

# Docker build & push
docker_build:
  stage: docker
  image: docker:24.0.7
  <<: *docker_before_script
  script:
    - echo "Searching for Dockerfile..."
    - find . -name "Dockerfile" -type f
    - cd laravel-app || cd $(find . -name "Dockerfile" -type f -exec dirname {} \; | head -n 1) || true
    - ls -la
    # if Dockerfile exists and build
    - if [ -f "Dockerfile" ]; then
        docker build -t "$CI_REGISTRY_IMAGE:latest" .;
        docker push "$CI_REGISTRY_IMAGE:latest";
      else
        echo "Dockerfile not found!";
        exit 1;
      fi
  only:
    - main

#Deploy
deploy:
  stage: deploy
  script:
    - echo "Deploying to production/staging environment"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - docker pull "$CI_REGISTRY_IMAGE:latest"
    - docker run -d -p 80:80 "$CI_REGISTRY_IMAGE:latest" 
  only:
    - main
